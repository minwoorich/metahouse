<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.metahouse.project">
	<select id="getProjectWithPrice" resultType="project">
		SELECT 
        p.project_id , p.creator_id, p.tag, p.title, 
        p.description , p.project_thumbnail_img ,
        p.project_date , p.project_hits, p.category1, p.category2_pj,
        o.price
        FROM project p
        JOIN project_options o
        ON p.project_id = o.project_id
        ORDER BY p.project_hits DESC
        LIMIT 9
    </select>
    
    
    <resultMap type="project" id="projectWithReviewAvg">
        <id column="project_id" property="project_id"/>
        <result column="creator_id" property="creator_id"/>
        <result column="tag" property="tag"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="project_thumbnail_img" property="project_thumbnail_img"/>
        <result column="project_date" property="project_date"/>
        <result column="project_hit" property="project_hit"/>
        <result column="category1" property="category1"/>
        <result column="category2_pj" property="category2_pj"/>
        <result column="average_reviews" property="average_reviews" />
        <result column="review_count" property="review_count" />
        <result column="single_price" property="single_price" />
        <result column="triple_price" property="triple_price" />
	</resultMap>
	
    <select id="findOrderByReviewRating" parameterType="int" resultMap="projectWithReviewAvg">
    	SELECT a.*, 
		count(r.project_review_id) review_count,
		AVG(r.rating) AS average_reviews,
        s.price single_price,
        t.basic_price triple_price
		
		FROM project a
		LEFT JOIN project_review r ON a.project_id = r.project_id
        left outer join project_package_single s on a.project_id = s.project_id
		left outer join project_package_triple t on a.project_id = t.project_id
		GROUP BY a.project_id, s.price, t.basic_price
		order by average_reviews desc
		limit #{limit}
    </select>
    
    <!-- 세희 -->
    <select id="findProjectInfo" parameterType="String" resultMap="projectWithReviewAvg">
    	SELECT a.*, 
      count(r.project_review_id) review_count,
      AVG(r.rating) AS average_reviews,
        s.price single_price,
        t.basic_price triple_price
      
      FROM project a
      LEFT JOIN project_review r ON a.project_id = r.project_id
        left outer join project_package_single s on a.project_id = s.project_id
      left outer join project_package_triple t on a.project_id = t.project_id
      WHERE creator_id=#{creator_id}
      GROUP BY a.project_id, s.price, t.basic_price
      order by average_reviews desc
      </select>
    <resultMap type="project" id="projectInfo">
        <id column="project_id" property="project_id"/>
        <result column="creator_id" property="creator_id"/>
        <result column="tag" property="tag"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="project_date" property="project_date"/>
        <result column="category1" property="category1"/>
        <result column="category2_pj" property="category2_pj"/>
        <result column="thumbnail" property="project_thumbnail_img"/>
        <!-- singlePkg -->
        <result column="pkg_title" property="pjtSingle.pkg_title"/>
        <result column="pkg_description" property="pjtSingle.pkg_description" />
        <result column="price" property="pjtSingle.price" />
        <result column="revision" property="pjtSingle.revision" />
        <result column="workdays" property="pjtSingle.workdays" />
        <!-- basicPkg -->
        <result column="basic_pkg_title" property="pjtTriple.basic_pkg_title"/>
        <result column="basic_pkg_description" property="pjtTriple.basic_pkg_description" />
        <result column="basic_revision" property="pjtTriple.basic_revision" />
        <result column="basic_price" property="pjtTriple.basic_price" />
        <result column="basic_workdays" property="pjtTriple.basic_workdays" />
        <!-- economyPkg -->
        <result column="economy_pkg_title" property="pjtTriple.economy_pkg_title"/>
        <result column="economy_pkg_description" property="pjtTriple.economy_pkg_description" />
        <result column="economy_revision" property="pjtTriple.economy_revision" />
        <result column="economy_price" property="pjtTriple.economy_price" />
        <result column="economy_workdays" property="pjtTriple.economy_workdays" />
        <!-- premiumPkg -->
        <result column="premium_pkg_title" property="pjtTriple.premium_pkg_title"/>
        <result column="premium_pkg_description" property="pjtTriple.premium_pkg_description" />
        <result column="premium_revision" property="pjtTriple.premium_revision" />
        <result column="premium_price" property="pjtTriple.premium_price" />
        <result column="premium_workdays" property="pjtTriple.premium_workdays" />
        <!-- user -->
        <result column="user_name" property="creator.userName" />
        <result column="thumbnail_store_filename" property="creator.thumbnailStoreFilename" />
	</resultMap>

    <select id="allProject" parameterType="hashMap" resultMap="projectInfo">
    	select p.*, 
    		   s.pkg_title, s.pkg_description, s.price, s.revision, s.workdays,
    		   t.basic_pkg_title, t.basic_pkg_description, t.basic_revision, t.basic_price, t.basic_workdays,
    		   t.economy_pkg_title, t.economy_pkg_description, t.economy_revision, t.economy_price, t.economy_workdays, 
    		   t.premium_pkg_title, t.premium_pkg_description, t.premium_revision, t.premium_price, t.premium_workdays,
    		   u.user_name, u.thumbnail_store_filename
    	from project p 
    		left outer join project_package_single s on p.project_id = s.project_id
			left outer join project_package_triple t on p.project_id = t.project_id
			left outer join user u on p.creator_id = u.user_id
			<where>
				<if test="category1 !='Non' and category2_pj =='Non'">
				p.category1 = #{category1}
				</if>
				<if test="category1 !='Non' and category2_pj != 'Non'">
				p.category1 = #{category1}
			  		AND p.category2_pj = #{category2_pj}
				</if>
			</where>
			ORDER BY project_date DESC
			<if test="skip != null">
			limit ${(skip-1)*16},16
			</if>
    </select>
    <select id="findProject" parameterType="Long" resultMap="projectInfo">
    	select p.*, 
    		   s.pkg_title, s.pkg_description, s.price, s.revision, s.workdays,
    		   t.basic_pkg_title, t.basic_pkg_description, t.basic_revision, t.basic_price, t.basic_workdays,
    		   t.economy_pkg_title, t.economy_pkg_description, t.economy_revision, t.economy_price, t.economy_workdays, 
    		   t.premium_pkg_title, t.premium_pkg_description, t.premium_revision, t.premium_price, t.premium_workdays,
    		   u.user_name, u.thumbnail_store_filename
    	from project p 
    		left outer join project_package_single s on p.project_id = s.project_id
			left outer join project_package_triple t on p.project_id = t.project_id
			left outer join user u on p.creator_id = u.user_id
		WHERE p.project_id = #{projectId}
    </select>
 
    <select id="findProjectImg" parameterType="Long" resultType="ProjectContentsDTO">
    	select * from project_content where project_id = #{projectId}
    </select>
    <select id="findProjectOptioin" parameterType="Long" resultType="ProjectAddOption">
    	select * from add_option where project_id = #{projectId}
    </select>
</mapper>